# 1013. Partition Array Into Three Parts With Equal Sum
# Given an array A of integers, return true if and only if we can partition the array into three non-empty parts with equal sums.

# Formally, we can partition the array if we can find indexes i+1 < j with (A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])

# Example 1:

# Input: A = [0,2,1,-6,6,-7,9,1,2,0,1]
# Output: true
# Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1
# Example 2:

# Input: A = [0,2,1,-6,6,7,9,-1,2,0,1]
# Output: false
# Example 3:

# Input: A = [3,3,6,5,-2,2,5,1,-9,4]
# Output: true
# Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4


# Constraints:

# 3 <= A.length <= 50000
# -10^4 <= A[i] <= 10^4

# def can_three_parts_equal_sum(a)
#   n = a.size

#   i = 1
#   while i < n
#     # p "a[0..i-1]: #{a[0..i-1].sum}, a[i]: #{a[i]}, a[i+1..n]: #{a[i+1..n].sum}"
#     return true if a[0..i-1].sum == a[i] && a[i] == a[i+1..n].sum
#   i += 1
#   end

#   i = n/2
#   while i > 0
#     j = n/2 + 1
#     while j < n -1
#       p "i: #{i}, a[0-i]: #{a[0..i-1]} #{a[0..i-1].sum}, a[i-n/2]: #{a[i..j]} #{a[i..j].sum}, a[i/2-n]: #{a[j+1..n]} #{a[j+1..n].sum}, #{a[0..i-1].sum == a[i..j].sum && a[i..j].sum == a[j+1..n].sum}"
#       return true if a[0..i-1].sum == a[i..j].sum && a[i..j].sum == a[j+1..n].sum
#     j += 1
#     end
#   i -= 1
#   end
#   false
# end

def can_three_parts_equal_sum(a)
  s = a.sum
  return false if s % 3 != 0

  sum = 0
  i = 0
  n = a.size
  found_s1 = false
  while i < n - 1
    sum += a[i]
    if (sum == s / 3 && s != 0 || s == 0 && sum == 0) && !found_s1
      found_s1 = true
    elsif (sum == s*2/3 && s !=0 || s == 0 && sum == 0) && found_s1
      return true
    end
    i += 1
  end

  false
end


p can_three_parts_equal_sum([10,-10,10,-10,10,-10,10,-10]) == true
p can_three_parts_equal_sum([0,2,1,-6,6,-7,9,1,2,0,1]) == true
p can_three_parts_equal_sum([1,3,2,2,4]) == true
p can_three_parts_equal_sum([0,2,1,-6,6,7,9,-1,2,0,1]) == false
p can_three_parts_equal_sum([3,3,6,5,-2,2,5,1,-9,4]) == true
p can_three_parts_equal_sum([12,-4,16,-5,9,-3,3,8,0]) == true
p can_three_parts_equal_sum([2832,2619,-5344,2539,-2459,2988,-2989,242,5908,1250,-4149,483,3641,-2232,768,-4142,-728,6273,306,-1360,2268,-7291,7373,-3861,2543,-6069,-501,4421,-3256,6549,-4962,-2538,6669,1155,-4140,-2819,4852,-1988,2422,-3846,-2609,2279,980,-127,-3410,1129,4485,1015,-5222,6697,-2631,784,-6058,4325,-2759,1654,-3029,6925,-1863,-4177,2971,-596,-30,-285,-1051,-371,-1510,7459,-5581,3604,-2845,203,3321,-1950,-782,4509,-3446,-5275,1420,5022,386,443,-2032,170,2496,503,-5713,405,4066,591,82,-7183,-323,6006,-511,-4739,3838,1023,-1765,3669,-6927,3689,-1769,2241,3399,-5029,1342,226,2877,-4829,-3068,5608,540,412,1641,-4231,4471,-3517,1913,-162,-3491,3555,-3943,3916,-5675,5431,891,-5574,2923,-1043,3594,-3619,5175,-466,-4478,-3518,6529,-1639,2579,-1094,-5,-4307,814,-2580,812,-1564,6386,-3052,5580,-1573,-4353,606,-955,-1531,3743,-3979,-893,2281,-324,6464,-6577,-1397,4138,-622,-3257,223,2221,1316,-2608,705,3545,-3451,4206,-1409,-3671,-1227,2101,3659,-750,-1544,3442,-4518,-2519,7405,-497,-4020,480,1642,-4107,-1315,4187,1773,-5093,5834,-17,-5791,-488,7852,-2516,-5476,6213,-847,1528,-1796,-4569,4406,680,-3527,-1966,-24,3427,-2263,4161,-4381,3909,520,-3371,-651,635,2555,2278,-6631,5985,-3786,1421,-3699,1864,6527,-8597,6971,-2117,-3754,-912,124,6840,-769,-3441,2077,1617,-838,-368,-3215,6032,-2289,1738,-3079,-4848,6822,-1044,-2390,3813,-2688,-1333,-1275,4194,-1038,-1573,3031,-3538,-727,574,2810,127,-817,-4564,2442,-1131,-692,5171,-2149,-2025,1401,2608,417,-248,-248,-2245,2592,2038,-21,328,-5956,-374,-748,6430,-5,-4749,416,1032,3878,-6283,-2056,8177,-2266,-1718,1074,-3718,-753,2039,5731,-8154,-685,213,3210,1457,-1391,-68,-1680,4536,-4328,6936,-4766,-1431,4021,2146,-8707,4050,3766,-7962,1047,4058,53,-2667,-253,2248,-3982,1229,6640,-7949,4015,3704,-7525,6440,1152,-4954,-2209,2770,3247,-1680,1515,-552,1630,-7109,2485,-2304,-571,1189,6060,-574,-861,1100,5,-4223,3927,-6789,6143,-2400,562,2709,-5271,2827,-3433,3657,-797,3401,-743,-4885,4866,-6,480,-861,-3557,4942,-4933,-180,1463,1619,914,-2491,3454,-5941,3041,1421,-1410,1707,357,-1097,-3986,5490,-276,-3259,-3843,8023,-253,-7308,7490,489,-3816,3934,-83,-7400,827,2650,1512,654,-1552,-3903,5467,-562,-4909,1463,486,-627,2868,3207,-8354,4878,-635,-2425,1504,663,1618,2846,-5817,3710,-486,317,-1261,2306,1082,-4408,-453,4293,-1531,-1249,-479,3095,-7404,928,3325,1676,870,-3029,-1293,4731,191,-592,-1928,-1821,-3277,3156,1555,-276,1543,-2965,4193,-4992,-260,6102,-5485,-1680,2221,2800,-5933,7086,-5666,6105,-6621,-470,2388,3136,-6003,3178,-117,-280,-2271,5815,503,-4992,-1528,831,3482,128,1749,-365,-1534,-3848,1879,288,2901,-4547,3810,570,-3865,3852,-3471,6581,-4093,3334,-5254,3179,-38,-3210,-2843,7362,777,-6764,7110,-8129,8140,-2381,1123,-3538,3858,-1437,-4986,-979,5985,1141,-5052,393,1247,-417,-3290,3472,821,-4429,303,2418,4569,-1890,-950,-2335,5749,-422,1268,-1138,-1406,-5830,5339,-2327,2687,-4687,-562,808,-839,5753,-1934,1713,850,1514,-4410,-3556,-708,3992,-2610,1284,3262,-2945,1245,4641,-2095,628,-4376,5615,-8361,8054,-1518,-5859,6709,1207,-6929,5326,-1898,1178,-5604,2293,2127,1893,-4105,1683,3549,-1905,-5334,4641,680,-686,-1236,-242,3748,-4288,4604,-6975,7222,-7330,2164,1346,3483,-2365,-5255,-602,8616,-555,-780,5,-678,-5234,5106,69,-1674,3829,-6202,894,3086,-431,-2757,4649,-3755,690,-3897,3175,4559,-6496,1278,-2878,753,327,-189,2851,-1267,-24,3352,-3761,239,3785,-3570,-779,5853,-1064,-629,1823,574,-5489,5202,-1122,-4979,-1410,4493,-2907,937,-1391,363,-98,1974,3641,-305,-1158,-5475,7707,-2967,-1500,2666,-2737,-1513,5315,-3230,-2237,3617,-3734,-2235,2744,3230,1877,-1795,-6026,1350,4087,-3358,-2122,6623,1150,-2419,-5732,3566,764,-209,4549,-4166,750,-4794,5813,2194,-268,-1991,-740,-1990,-1686,-1158,7236,-771,-1103,-4690,5532,1787,-7691,6304,-6107,-19,350,7252,-3966,-3531,-370,7768,207,-8359,7985,-7020,12,2172,-2716,4513,-1536,3703,-7452,4009,-543,-819,-1035,1337,3633,930,-3852,3629,-5633,-560,1585,1092,393,-555,-3159,5017,1882,-6909,2416,4784,-3071,-2146,-1589,4653,-602,-5005,2476,1424,3734,-5987,637,6293,-3244,-2112,5118,-3245,-3234,5177,-6226,1569,2197,-1351,5443,-1363,-3277,-370,-3297,3387,-2104,2802,1419,-1493,-181,674,-1748,4689,-1835,2946,-4858,4249,-1180,-5306,407,3041,1630,-1590,-3820,-1198,7524,-2062,-1392,651,614,2342,-4586,-340,4872,-6034,2466,-3818,6886,-5216,1220,-692,3195,-5493,6532,-2134,135,550,-853,-3847,7371,-1092,1768,-5267,5131,-8589,3954,-2445,5415,-6327,4823,539,2320,-2955,2152,-983,-5100,4628,-714,-3023,-587,-1266,7964,-4339,4010,-4131,-2434,6401,-2734,-1694,560,3766,-5730,5383,-5762,-262,182,1764,-1515,49,1291,-1035,6608,-349,-1401,-6040,2666,-3264,967,-1145,-153,7735,-1692,809,-5670,4833,-2009,-2513,266,7023,-1439,-2100,1937,-607,-5950,7493,-6302,5578,-3069,-263,4464,-6320,5404,-2297,-2527,5481,-6682,5311,-1893,3444,-7688,-643,4204,-2933,2298,2824,-6393,7025,-5317,5186,-1614,-4017,2231,1600,1579,-3678,5601,-8899,8419,-277,-5087,2976,-3998,-1280,7384,-7531,3832,-1351,-465,-870,4334,-2791,-253,-447,3912,-2838,-2672,1768,810,4580,-7138,4081,-4735,5223,-3158,6278,-5448,5064,-5313,5373,-7818,5805,-3439,2517,-3685,5715,-5947,6888,-167,-7104,4156,-3672,5093,-6701,7070,-5113,-1609,5281,-5004,4683,2817,-2889,-4639,4922,-4227,3669,-2736,6625,-8829,3463,1711,3130,-4090,-465,3458,-4043,3036,1390,-2742,3580,-1557,-6131,1840,-412,-304,711,611,811,1007,-2446,298,-1066,2275,-3101,7965]) == false
